@startuml
'https://plantuml.com/sequence-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

package Model{
    class Combination {
        + Combination(combination_size : Integer, colors: Color[*])
        + Combination(combination_size : Integer)
        + switchColor(index : Integer, color : Color)
        + compareTo(a: Combination) : Hint
    }

    enum Display{
        MENU
        GAME
        END
    }

    enum HintState {
        CORRECT
        'Bonne couleur bonne position
        WRONG_POS
        'Bonne couleur mauvaise position
        WRONG_COLOR
        'mauvaise couleur
    }

    enum Color {
        RED
        BLUE
        YELLOW
        GREEN
        PURPLE
        PINK
    }

    class Hint {
        + Hint(combination : Combination)
    }

    class Game {
        - nb_round : Integer
        - combination_size : Integer
        - nb_guess : Integer
        - nb_available_color : Integer
        + set_combination_size(nb : Integer)
        + addGuess()
        + set_nb_available_color(nb : Integer)
        + getGuess():Integer
    }

    class Round {
        + Round(combination_size : Integer)
        + getCombination() : Combination
    }
    Game *--> Round : "1.*\n- rounds"
    Combination *-> Color : "1.*\n- colors"
    Round *-> "1\n-hint" Hint
    Hint o-u-> "0..*\nhintStates" HintState
}

package View {
    class MainWindow {
        - observers : Observer[*]
        + MainWindow()
        + SwitchDisplay(display : Display)
        + addObserver(observer : Observer)
        + notifyObservers()
    }

    class DisplayMode {
        + displayHint()
    }

    class ModeEasy extends DisplayMode {
      + displayHint()
    }
    class ModeClassic extends DisplayMode {
      + displayHint()
    }
    class ModeNumeric extends DisplayMode {
      + displayHint()
    }
}


package Controller{
    class GameController implements SelectColorObserver {
        - current_game_mode : GameMode
        + selected_color : Color
    }
    GameController *--> "1..*\n- games" Game
    GameController o--> "1\ndifficulty" DisplayMode
}
Round *-> " 1 \n - sercretCombination" Combination
Round *-> " 1..* \n - combiArray" Combination

MainWindow ..> Hint: <<use>>
MainWindow ..> Display: <<use>>

@enduml